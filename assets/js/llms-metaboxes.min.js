!function(e){e.fn.llmsCollapsible=function(){return this.on("click",".llms-collapsible-header",function(){var t=e(this).closest(".llms-collapsible"),a=t.siblings(".llms-collapsible");t.toggleClass("opened").trigger("llms-collapsible-toggled"),t.find(".llms-collapsible-body").slideToggle(400),a.each(function(){e(this).removeClass("opened"),e(this).find(".llms-collapsible-body").slideUp(400)})}),this},window.llms=window.llms||{};var t=function(){this.repeaters={metaboxes:this,$repeaters:null,init:function(){var t=this;t.$repeaters=e(".llms-mb-list.repeater"),t.$repeaters.length&&(LLMS.wait_for(function(){return"undefined"!=typeof tinyMCE},function(){t.load(),t.bind()}),e('#post input[type="submit"], #post-preview').on("click",function(){e(this).attr("data-llms-clicked","yes")}),e("#post").on("submit",t.handle_submit))},bind:function(){var t=this;t.$repeaters.each(function(){var a=e(this),l=a.find(".llms-repeater-rows"),n=a.find(".llms-repeater-model");tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,n.find(".llms-mb-list.editor textarea").attr("id")),a.find(".llms-repeater-new-btn").on("click",function(){t.add_row(a,null,!0)}),l.sortable({handle:".llms-drag-handle",items:".llms-repeater-row",start:function(e,t){l.addClass("dragging")},stop:function(n,s){l.removeClass("dragging");var i=s.item.find("textarea.wp-editor-area");i.each(function(){var t=e(this).attr("id");tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,t),tinyMCE.EditorManager.execCommand("mceAddEditor",!0,t)}),t.save(a)}}),a.on("click",".llms-repeater-remove",function(l){l.stopPropagation();var n=e(this).closest(".llms-repeater-row");window.confirm(LLMS.l10n.translate("Are you sure you want to delete this row? This cannot be undone."))&&(n.remove(),setTimeout(function(){t.save(a)},1))})})},add_row:function(t,a,l){var n=this,s=t.find(".llms-repeater-rows"),i=t.find(".llms-repeater-model"),r=i.find(".llms-repeater-row").clone(),o=t.find(".llms-repeater-row").length,d=n.reindex(r,o);a&&e.each(a,function(t,a){var l=r.find('[name^="'+t+'"]');l.hasClass("llms-select2-student")?(e.each(a,function(e,t){l.append('<option value="'+t.key+'" selected="selected">'+t.title+"</option>")}),l.trigger("change")):l.val(a)}),setTimeout(function(){n.bind_row(r)},1),s.append(r),l&&r.find(".llms-collapsible-header").trigger("click"),tinyMCE.EditorManager.execCommand("mceAddEditor",!0,d),t.trigger("llms-new-repeater-row",{$row:r,data:a})},bind_row:function(e){this.bind_row_header(e),e.find(".llms-select2").llmsSelect2({width:"100%"}),e.find(".llms-select2-student").llmsStudentsSelect2(),this.metaboxes.bind_datepickers(e.find(".llms-datepicker")),this.metaboxes.bind_controllers(e.find("[data-is-controller]"))},bind_row_header:function(t){var a=t.find(".llms-repeater-title"),l=t.find(".llms-collapsible-header-title-field");a.attr("data-default",a.text()),l.on("keyup focusout blur",function(){var t=e(this).val();t||(t=a.attr("data-default")),a.text(t)}).trigger("keyup")},handle_submit:function(t){var a=e('#post [data-llms-clicked="yes"]'),l=a.parent().find(".spinner");if(a.is("#post-preview"))return void a.removeAttr("data-llms-clicked");t.preventDefault(),e('#post input[type="submit"]').addClass("disabled").attr("disabled","disabled"),l.addClass("is-active");var n,s=window.llms.metaboxes.repeaters,i=0;s.$repeaters.each(function(){s.save(e(this))}),n=setInterval(function(){i>=59||!e(".llms-mb-list.repeater.processing").length?(clearInterval(n),e("#post").off("submit",this.handle_submit),l.removeClass("is-active"),a.removeClass("disabled").removeAttr("disabled").trigger("click")):i++},1e3)},load:function(){var t=this;t.$repeaters.each(function(){var a=e(this);a.hasClass("is-loaded")||a.hasClass("processing")||t.store(a,"load",function(l){a.addClass("is-loaded"),e.each(l.data,function(e,l){t.add_row(a,l,!1)}),a.find(".llms-repeater-rows .llms-repeater-row").each(function(){t.bind_row(e(this))})})})},reindex:function(t,a){function l(t,l){t.each(function(){var t=e(this).attr(l);e(this).attr(l,t.replace(n,a))})}var n=t.attr("data-row-order"),s=t.find(".llms-mb-list.editor textarea");return tinyMCE.EditorManager.execCommand("mceRemoveEditor",!0,s.attr("id")),t.attr("data-row-order",a),l(t,"data-row-order"),l(t.find("button.insert-media"),"data-editor"),l(t.find('input[name^="_llms"], textarea[name^="_llms"], select[name^="_llms"]'),"id"),l(t.find('input[name^="_llms"], textarea[name^="_llms"], select[name^="_llms"]'),"name"),l(t.find("[data-controller]"),"data-controller"),l(t.find("[data-controller]"),"data-controller"),l(t.find("button.wp-switch-editor"),"data-wp-editor-id"),l(t.find("button.wp-switch-editor"),"id"),l(t.find(".wp-editor-tools"),"id"),l(t.find(".wp-editor-container"),"id"),s.attr("id")},save:function(e){e.trigger("llms-repeater-before-save",{$el:e}),this.store(e,"save")},serialize:function(t){var a=[];return t.find(".llms-repeater-rows .llms-repeater-row").each(function(){var t={};e(this).find('input[name^="_llms"], select[name^="_llms"]').each(function(){t[e(this).attr("name")]=e(this).val()}),e(this).find('textarea[name^="_llms"]').each(function(){var a=e(this).attr("name");tinyMCE.editors[a]?t[a]=tinyMCE.editors[a].getContent():t[a]=e(this).val()}),a.push(t)}),a},store:function(e,t,a){a=a||function(){};var l=this,n={action:e.find(".llms-repeater-field-handler").val(),store_action:t};"save"===t&&(n.rows=l.serialize(e)),LLMS.Ajax.call({data:n,beforeSend:function(){e.addClass("processing"),LLMS.Spinner.start(e)},success:function(t){a(t),LLMS.Spinner.stop(e),e.removeClass("processing")}})}},this.repeaters.init(),this.init=function(){var t=this;e(".llms-select2-post").each(function(){t.post_select(e(this))}),e(".llms-collapsible-group").llmsCollapsible(),this.bind_tabs();var a=[{selector:e(".llms-datepicker"),func:"bind_datepickers"},{selector:e(".llms-select2"),func:function(e){e.llmsSelect2({width:"100%"})}},{selector:e(".llms-select2-student"),func:function(e){e.llmsStudentsSelect2()}},{selector:e('input[type="checkbox"][data-controls]'),func:"bind_cb_controllers"},{selector:e("[data-is-controller]"),func:"bind_controllers"},{selector:e(".llms-table"),func:"bind_tables"},{selector:e(".llms-merge-code-wrapper"),func:"bind_merge_code_buttons"},{selector:e("a.llms-editable"),func:"bind_editables"}];if(e.each(a,function(a,l){if(l.selector.length){var n=l.selector.filter(function(){return 0===e(this).closest(".llms-repeater-model").length});"string"==typeof l.func?t[l.func](n):"function"==typeof l.func&&l.func(n)}}),window.llms.post.post_type){var l="bind_"+window.llms.post.post_type;"function"==typeof this[l]&&this[l]()}},this.bind_cb_controllers=function(t){t=t||e('input[type="checkbox"][data-controls]'),t.each(function(){var t=e(this),a=e(t.attr("data-controls")).closest(".llms-mb-list");t.on("change",function(){e(this).is(":checked")?a.slideDown(200):a.slideUp(200)}),t.trigger("change")})},this.bind_controllers=function(t){t=t||e("[data-is-controller]"),t.each(function(){var t,a=e(this),l=e('[data-controller="#'+a.attr("id")+'"]');a.on("change",function(){t="checkbox"===a.attr("type")?a.is(":checked")?a.val():"false":a.val(),l.each(function(){var a=e(this).attr("data-controller-value"),l=[];-1!==a.indexOf(",")?l=a.split(","):l.push(a),-1!==l.indexOf(t)?e(this).slideDown(200):e(this).slideUp(200)})}),a.trigger("change")})},this.bind_datepicker=function(e){var t=e.attr("data-format")||"mm/dd/yy",a=e.attr("data-max-date")||null,l=e.attr("data-min-date")||null;e.datepicker({dateFormat:t,maxDate:a,minDate:l})},this.bind_datepickers=function(t){var a=this;t=t||e(".llms-datepicker"),t.each(function(){a.bind_datepicker(e(this))})},this.bind_editables=function(){function t(t){var l,n=t.find("label").clone(),s=t.attr("data-llms-editable"),i=t.attr("data-llms-editable-type"),r=t.attr("data-llms-editable-required")||"no",o=t.attr("data-llms-editable-value");if(r="yes"===r?' required="required"':"","select"===i){var d,c=JSON.parse(t.attr("data-llms-editable-options"));l=e('<select name="'+s+'"'+r+" />");for(var m in c)d=o===m?' selected="selected"':"",l.append('<option value="'+m+'"'+d+">"+c[m]+"</option>")}else if("datetime"===i){l=e('<div class="llms-datetime-field" />'),o=JSON.parse(o);var u=t.attr("data-llms-editable-date-format")||"",f=t.attr("data-llms-editable-date-min")||"",p=t.attr("data-llms-editable-date-max")||"";$picker=e('<input class="llms-date-input llms-datepicker" data-format="'+u+'" data-max-date="'+p+'" data-min-date="'+f+'" name="'+s+'[date]" type="text" value="'+o.date+'">'),a.bind_datepicker($picker),l.append($picker),l.append("<em>@</em>"),l.append('<input class="llms-time-input" max="23" min="0" name="'+s+'[hour]" type="number" value="'+o.hour+'">'),l.append("<em>:</em>"),l.append('<input class="llms-time-input" max="59" min="0" name="'+s+'[minute]" type="number" value="'+o.minute+'">')}else l=e('<input name="'+s+'" type="'+i+'" value="'+o+'"'+r+">");t.empty().append(n).append(l),"select"===i&&setTimeout(function(){l.trigger("change")},100)}var a=this;e("a.llms-editable").on("click",function(a){a.preventDefault();var l,n=e(this);l=n.attr("data-fields")?e(n.attr("data-fields")):n.closest(".llms-metabox-section").find("[data-llms-editable]"),n.remove(),l.each(function(){t(e(this))})})},this.bind_llms_engagement=function(){var t=this;e("#_llms_engagement_type").on("change",function(){e("#_llms_engagement").trigger("llms-engagement-type-change",e(this).val())}),e("#_llms_engagement").on("llms-engagement-type-change",function(a,l){var n=e(this);switch(l){case"achievement":case"certificate":case"email":var s="llms_"+l;n.val(null).attr("data-post-type",s).trigger("change"),t.post_select(n);break;default:n.trigger("llms-engagement-type-change-external",l)}})},this.bind_llms_membership=function(){function t(){var e=l.find("tbody tr");1===e.length?e.first().show():e.first().hide()}function a(){var t=[];return l.find('tbody tr a[href="#llms-course-remove"]').each(function(){t.push(e(this).attr("data-id"))}),t}var l=e(".llms-mb-list._llms_content_table");t(),l.on("click",'a[href="#llms-course-remove"]',function(a){a.preventDefault();var l=e(this),n=l.closest("tr"),s=l.closest(".llms-mb-list");LLMS.Spinner.start(s),window.LLMS.Ajax.call({data:{action:"membership_remove_auto_enroll_course",course_id:l.attr("data-id")},beforeSend:function(){s.find("p.error").remove()},success:function(e){e.success?(n.fadeOut(200),setTimeout(function(){n.remove(),t()},400)):s.prepend('<p class="error">'+e.message+"</p>"),LLMS.Spinner.stop(s)}})}),l.on("click",'a[href="#llms-course-bulk-enroll"]',function(t){t.preventDefault();var a=e(this),l=(a.closest("tr"),a.closest(".llms-mb-list"));window.confirm(LLMS.l10n.translate("Click okay to enroll all active members into the selected course. Enrollment will take place in the background and you may leave your site after confirmation. This action cannot be undone!"))&&(LLMS.Spinner.start(l),window.LLMS.Ajax.call({data:{action:"bulk_enroll_membership_into_course",course_id:a.attr("data-id")},beforeSend:function(){l.find("p.error").remove()},success:function(e){e.success?a.replaceWith('<strong style="float:right;">'+e.data.message+"&nbsp;&nbsp;</strong>"):l.prepend('<p class="error">'+e.message+"</p>"),LLMS.Spinner.stop(l)}}))}),e("#_llms_auto_enroll").on("change",function(){var l=e(this).val(),n=e(this).find('option[value="'+e(this).val()+'"]').text();if(l){if(-1!==a().indexOf(l))return alert(LLMS.l10n.replace('"%s" is already in the course list.',{"%s":n})),void e(this).val("").trigger("change");var s=e(".llms-mb-list._llms_content_table");$tr=e("<tr />"),$tr.append('<td><span class="llms-drag-handle" style="color:#999;"><i class="fa fa-ellipsis-v" aria-hidden="true" style="margin-right:2px;"></i><i class="fa fa-ellipsis-v" aria-hidden="true"></i></span></td>'),$tr.append('<td><a href="'+window.llms.admin_url+"post.php?action=edit&post="+l+'">'+n+"</a></td>"),$tr.append('<td><a class="llms-button-danger small" data-id="'+l+'" href="#llms-course-remove" style="float:right;">'+LLMS.l10n.translate("Remove course")+'</a><a class="llms-button-secondary small" data-id="'+l+'" href="#llms-course-bulk-enroll" style="float:right;">'+LLMS.l10n.translate("Enroll All Members")+"</a></td>"),s.find("table tbody").append($tr),e(this).val("").trigger("change"),t(),s.trigger("llms-save-autoenroll-courses")}}),l.find("table tbody").sortable({handle:".llms-drag-handle",stop:function(e,t){t.item.closest(".llms-mb-list").trigger("llms-save-autoenroll-courses")}}),l.on("llms-save-autoenroll-courses",function(){var t=e(this);LLMS.Spinner.start(t),window.LLMS.Ajax.call({data:{action:"llms_save_membership_autoenroll_courses",courses:a()},error:function(e,t,a){alert(a)},complete:function(){LLMS.Spinner.stop(t)}})})},this.bind_llms_order=function(){e('button[name="llms-refund-toggle"]').on("click",function(){var t=e(this),a=t.closest("tr"),l=a.attr("data-transaction-id"),n=t.attr("data-refundable"),s="1"===t.attr("data-gateway-supports"),i=t.attr("data-gateway"),r=e("#llms-txn-refund-model .llms-txn-refund-form").clone(),o=r.find(".gateway-btn");"remove"!==t.attr("data-action")?(t.text(LLMS.l10n.translate("Cancel")),t.attr("data-action","remove"),r.find("input").removeAttr("disabled"),r.find('input[name="llms_refund_amount"]').attr("max",n),r.find('input[name="llms_refund_txn_id"]').val(l),s&&(o.find(".llms-gateway-title").text(i),o.show()),a.after(r)):(t.text(LLMS.l10n.translate("Refund")),t.attr("data-action",""),a.next("tr").remove())}),e('button[name="llms-manual-txn-toggle"]').on("click",function(){var t=e(this),a=t.closest("tr"),l=e("#llms-manual-txn-model .llms-manual-txn-form").clone();"remove"!==t.attr("data-action")?(t.text(LLMS.l10n.translate("Cancel")),t.attr("data-action","remove"),l.find("input").removeAttr("disabled"),a.after(l)):(t.text(LLMS.l10n.translate("Record a Manual Payment")),t.attr("data-action",""),a.next("tr").remove())}),e(".llms-metabox").one("focus",'.llms-metabox-field[data-llms-editable="payment_gateway"] select',function(){e(this).attr("data-original-value")||e(this).attr("data-original-value",e(this).val())}),e(".llms-metabox").on("change",'.llms-metabox-field[data-llms-editable="payment_gateway"] select',function(){var t=e(this),a=t.val(),l=JSON.parse(t.closest(".llms-metabox-field").attr("data-gateway-fields")),n=l[a];for(var s in n){var i=e('input[name="'+n[s].name+'"]'),r=i.closest(".llms-metabox-field");n[s].enabled?(r.show(),i.attr("required","required"),i.removeAttr("disabled"),a===t.attr("data-original-value")&&i.val(r.attr("data-llms-editable-value"))):(i.attr("value",""),i.removeAttr("required"),r.hide())}})},this.bind_merge_code_buttons=function(t){t=t||e(".llms-merge-code-wrapper"),t.find(".llms-merge-code-button").on("click",function(){e(this).next(".llms-merge-codes").toggleClass("active")}),t.find(".llms-merge-codes li").on("click",function(){var t=e(this),a=t.closest(".llms-merge-codes"),l=a.attr("data-target"),n=t.attr("data-code");if(-1===l.indexOf("#")){var s=window.tinymce.editors[l];s?s.insertContent(n):alert(LLMS.l10n.translate("Copy this code and paste it into the desired area")+": "+n)}else e(l).val(e(l).val()+n);a.removeClass("active")})},this.bind_tabs=function(){e(".llms-nav-tab-wrapper .tabs li").on("click",function(){var t=e(this),a=t.closest(".llms-mb-container"),l=t.attr("data-tab");t.siblings().removeClass("llms-active"),a.find(".tab-content").removeClass("llms-active"),t.addClass("llms-active"),e("#"+l).addClass("llms-active")})},this.post_select=function(t){var a="multiple"===t.attr("multiple");if(t.llmsPostsSelect2({width:a?"100%":"65%"}),!a&&!t.attr("data-no-view-button")){var l=LLMS.l10n.translate("View"),n=e('<a class="llms-button-secondary small" style="margin-left:5px;" target="_blank" href="#">'+l+' <i class="fa fa-external-link" aria-hidden="true"></i></a>');t.next(".select2").after(n),t.on("change",function(){var t=e(this).val();t?n.attr("href","/?p="+t).show():n.hide()}).trigger("change")}},this.bind_tables=function(){e('.llms-table button[name="llms-expand-table"]').on("click",function(){var t=e(this),a=t.closest(".llms-table");if(t.attr("data-text")){var l=t.text();t.text(t.attr("data-text")),t.attr("data-text",l)}a.find(".expandable").each(function(){e(this).hasClass("closed")?e(this).addClass("opened").removeClass("closed"):e(this).addClass("closed").removeClass("opened")})})},this.init()};window.llms.metaboxes=new t}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
